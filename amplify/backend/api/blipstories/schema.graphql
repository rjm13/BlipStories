# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public} } # FOR TESTING ONLY!

type User @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}]) {
  id: ID! 
  name: String
  email: String
  imageUri: String
  bio: String
  following: [ID]
  authored: [Story] @hasMany(indexName: "byUser", fields: "id")
  narrated: [Story] @hasMany(indexName: "byNarrator", fields: "id")
  art: [Story] @hasMany(indexName: "byArtist", fields: "id")
  numAuthored: Int
  pseudonym: String
  narratorPseudo: String
  artistPseudo: String
  birthdate: String
  isPublisher: Boolean
  isNarrator: Boolean
  isArtist: Boolean
  topthree: [String]
  followers: [FollowingConn] @hasMany(indexName: "byFollower", fields: "id")
  Pinned: [Story] @hasMany(indexName: "byUser", fields: "id")
  Rated: [Rating] @hasMany (indexName: "byUser", fields: "id")
  Finished: [Story] @hasMany (indexName: "byUser", fields: "id")
  sampleUri: String
  narratorText: String
  accents: [String]
  voice: String
  artistText: String
  artStyles: [String]
}

type FollowingConn 
  @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
    id: ID!
    followerID: ID @index(name: "byFollower", sortKeyFields: ["authorID"])
    authorID: ID @index(name: "byAuthor", sortKeyFields: ["followerID"])
    author: User @hasOne (fields: ["authorID"])
    follower: User @hasOne (fields: ["followerID"])
}

type PinnedStory
  @model @auth( rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
  id: ID!
  userID: ID @index(name: "byUser", sortKeyFields: ["storyID"])
  user: User @hasOne (fields: ["userID"])
  storyID: ID
  story: Story @hasOne (fields: ["storyID"])
}

type FinishedStory
  @model @auth( rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String @index(name: "finishedStoriesByDate", queryField: "finishedStoriesByDate", sortKeyFields: [ "createdAt" ])
  userID: ID @index(name: "byUser", sortKeyFields: ["storyID"])
  user: User @hasOne (fields: ["userID"])
  storyID: ID
  story: Story @hasOne (fields: ["storyID"])
  createdAt: String
}

type Story @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String @index(name: "storiesByDate", queryField: "storiesByDate", sortKeyFields: ["createdAt"]  )
  title: String!
  imageUri: String
  audioUri: String!
  #genre: String
  user: User @hasOne (fields: ["userID"])
  userID: ID @index(name: "byUser", sortKeyFields: ["id"])
  #author: User @hasOne(fields: ["id"])
  author: String
  authorID: ID @index(name: "byAuthor", sortKeyFields: ["id"])
  narrator: User @hasOne (fields: ["narratorID"])
  narratorID: ID @index(name: "byNarrator", sortKeyFields: ["id"])
  artist: User @hasOne (fields: ["artistID"])
  artistID: ID @index(name: "byArtist", sortKeyFields: ["id"])
  time: Int
  summary: String
  description: String
  nsfw: Boolean
  comments: [Comment] @hasMany (indexName: "byStory", fields: ["id"])
  tags: [Tag] @manyToMany (relationName: "StoryTag")
  ratingAvg: Float
  ratingAmt: Int
  rated: [Rating] @hasMany(indexName: "byStory", fields: ["id"])
  genreID: ID @index(name: "byGenre", sortKeyFields: ["id"])
  genre: Genre @hasOne (fields: ["genreID"])
  hidden: Boolean
  approved: Boolean
  createdAt: String
  numListens: Int
  }

type Genre @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    genre: String!
    icon: String
    PrimaryColor: String
    SecondaryColor: String
    imageUri: String
}

type ImageAsset @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    title: String
    imageUri: String
    isSample: Boolean
    user: User @hasOne (fields: ["userID"])
    userID: ID 
}

type AudioAsset @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    title: String
    audioUri: String
    isSample: Boolean
    user: User @hasOne (fields: ["userID"])
    userID: ID
}

type Flag @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    storyID: ID!
    story: Story @hasOne (fields: ["storyID"])
    flagTypes: [String]
    user: User @hasOne (fields: ["userID"])
    userID: ID 
}

type Comment @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String @index(name: "commentsByDate", queryField: "commentsByDate", sortKeyFields: ["createdAt"]  )
    storyID: ID! @index(name: "byStory", sortKeyFields: ["userID"])
    story: Story @hasOne (fields: ["storyID"])
    content: String!
    user: User @hasOne (fields: ["userID"])
    userID: ID 
    createdAt: String
}

type Tag @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    tagName: String!
    nsfw: Boolean
    genreID: ID @index(name: "byGenre", sortKeyFields: ["id"])
    genre: Genre @hasOne (fields: ["genreID"])
    stories: [Story] @manyToMany(relationName: "StoryTag")
  }

  type Rating @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String @index(name: "ratingsByDate", queryField: "ratingsByDate", sortKeyFields: ["createdAt"]  )
    storyID: ID! @index(name: "byStory", sortKeyFields: ["userID"])
    story: Story @hasOne (fields: ["storyID"])
    userID: ID! @index(name: "byUser", sortKeyFields: ["storyID"])
    user: User @hasOne (fields: ["userID"])
    rating: Int
    genreID: ID @index(name: "byGenre", sortKeyFields: ["id"])
    genre: Genre @hasOne (fields: ["genreID"])
    createdAt: String
}