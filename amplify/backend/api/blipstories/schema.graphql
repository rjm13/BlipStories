# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public} } # FOR TESTING ONLY!

type User @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}]) {
  id: ID! 
  name: String
  email: String!
  imageUri: String
  bio: String
  following: [ID]
  authored: [Story] @hasMany(indexName: "byUser", fields: "id")
  numAuthored: Int
  pseudonym: String
  birthdate: String
  isPublisher: Boolean
  followers: [FollowingConn] @hasMany(indexName: "byFollower", fields: "id")
  Pinned: [Story] @hasMany(indexName: "byUser", fields: "id")
}

type FollowingConn 
  @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
    id: ID!
    followerID: ID @index(name: "byFollower", sortKeyFields: ["authorID"])
    authorID: ID @index(name: "byAuthor", sortKeyFields: ["followerID"])
    author: User @hasOne (fields: ["authorID"])
    follower: User @hasOne (fields: ["followerID"])
}

type PinnedStory
  @model @auth( rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
  id: ID!
  userID: ID @index(name: "byUser", sortKeyFields: ["storyID"])
  user: User @hasOne (fields: ["userID"])
  storyID: ID
  story: Story @hasOne (fields: ["storyID"])
}

type Story @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
{
  id: ID!
  title: String!
  imageUri: String
  audioUri: String!
  genre: String
  user: User @hasOne (fields: ["userID"])
  userID: ID @index(name: "byUser", sortKeyFields: ["id"])
  author: String
  narrator: String
  time: Int 
  description: String
  detailedDescription: [String]
  nsfw: Boolean
  comments: [Comment] @hasMany
  tags: [Tag] @hasMany
  ratingAvg: Float
  rated: [Rating]
  }

type Comment @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    storyID: ID!
    story: Story @hasOne
    content: String!
}

type Tag @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    tagName: String!
    stories: [Story] @hasMany
  }

  type Rating @model @auth(rules: [{ allow: owner, operations: [create, delete, update, read]}])
  {
    id: ID!
    storyID: ID!
    story: Story @hasOne
    userID: ID!
    user: User @hasOne
    rating: Int
}